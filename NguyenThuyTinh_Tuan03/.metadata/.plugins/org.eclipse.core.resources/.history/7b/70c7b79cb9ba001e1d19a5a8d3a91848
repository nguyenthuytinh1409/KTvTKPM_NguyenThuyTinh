package entity;

import java.io.File;
import java.util.Optional;

import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.comments.Comment;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import com.google.common.base.Strings;

public class CommonOperations {
	public static void cau1(File projectDir) {
		new DirExplorer((level, path, file) -> path.endsWith(".java"), (level, path, file) -> {
			System.out.println(path);
			System.out.println(Strings.repeat("=", path.length()));
			try {
				new VoidVisitorAdapter<Object>() {
					@Override
					public void visit(ClassOrInterfaceDeclaration n, Object arg) {
						super.visit(n, arg);
						System.out.println(" * " + n.getName());
					}
				}.visit(StaticJavaParser.parse(file), null);
				System.out.println(); // empty line
			} catch (Exception e) {
				new RuntimeException(e);
			}
		}).explore(projectDir);
	}

	public static void cau2(File projectDir) {
		new DirExplorer((level, path, file) -> path.endsWith(".java"), (level, path, file) -> {
			System.out.println(path);
			System.out.println(Strings.repeat("=", path.length()));
			try {
				new VoidVisitorAdapter<Object>() {
					@Override
					public void visit(ClassOrInterfaceDeclaration n, Object arg) {
						super.visit(n, arg);
						String clsName = n.getNameAsString();
						char c = clsName.charAt(1);
						if (c > 'a' && c < 'z') {
							System.out.println("**************Class name: " + clsName + " Posistion["
									+ n.getBegin() + " /]" + n.getEnd());
						}
					}
				}.visit(StaticJavaParser.parse(file), null);
			} catch (Exception e) {
				new RuntimeException(e);
			}
		}).explore(projectDir);
	}
	public static void cau3(File projectDir) {
		new DirExplorer((level, path, file) -> path.endsWith(".java"), (level, path, file) -> {
			System.out.println(path);
			System.out.println(Strings.repeat("=", path.length()));
			try {
				new VoidVisitorAdapter<Object>() {
					@Override
					public void visit(ClassOrInterfaceDeclaration n, Object arg) {
						super.visit(n, arg);
						String clsName = n.getNameAsString();
						char c = clsName.charAt(0);
						Optional<Comment> oCmnt = n.getComment();
						if (oCmnt.isEmpty()) {
							System.out.println("**************Class: " + clsName + " has no comment ");
						}else {
							Comment cmt = oCmnt.get();
							String content = cmt.getContent();
							if(!content.contains("@Auhor"))
								System.out.println("**************Class: " + clsName + " has comment without @Author ");
						}
					}
				}.visit(StaticJavaParser.parse(file), null);
			} catch (Exception e) {
				new RuntimeException(e);
			}
		}).explore(projectDir);
	}
	public static void cau4(File projectDir) {
		new DirExplorer((level, path, file) -> path.endsWith(".java"), (level, path, file) -> {
			System.out.println(path);
			System.out.println(Strings.repeat("=", path.length()));
			try {
				new VoidVisitorAdapter<Object>() {
					@Override
					public void visit(ClassOrInterfaceDeclaration n, Object arg) {
						super.visit(n, arg);
						String clsName = n.getNameAsString();
						char c = clsName.charAt(0);
						Optional<Comment> oCmnt = n.getComment();
						if (c > 'a' && c < 'z') {
							System.out.println("**************Class name: " + clsName + "bat dau bag chu thuong");
						}
					}
				}.visit(StaticJavaParser.parse(file), null);
			} catch (Exception e) {
				new RuntimeException(e);
			}
		}).explore(projectDir);
	}

	public static void main(String[] args) {
		File projectDir = new File("C:\\Users\\Student\\Desktop\\NguyenThuyTinh_Tuan03\\tinh\\src\\main\\java\\entity");
		cau1(projectDir);
		cau2(projectDir);
		cau3(projectDir);
		cau4(projectDir);
	}
}
